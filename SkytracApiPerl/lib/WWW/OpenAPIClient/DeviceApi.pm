=begin comment

Quicksilver Web API

Further detail about the available features and configuration options can be found in the User Guide.    # Authorization All API calls use bearer authorization except for the following. - POST /api/user/sessions - Uses basic authorization - GET /api/events - Uses query string authorization  # Errors Since the following errors can happen with any API call or with a broad group of API calls, they are documented here rather than for each API call. - 400 (Bad Request). This may occur for any API call, due to the authorization header being malformed. It may also occur due to malformed or incorrect JSON structure of the request body. Other more specific reasons are documented on a per API basis below. - 401 (Unauthenticated) - 403 (Unauthorized). If the user is authenticated as a user with the Standard role, but the API call requires the Admin role. - 500 (Internal Server Error) 

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DeviceApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# device_backup_available_get
#
# Get the user data backup available status
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_backup_available_get' } = {
        summary => 'Get the user data backup available status',
        params => $params,
        returns => 'boolean',
        };
}
# @return boolean
#
sub device_backup_available_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/backup/available';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('boolean', $response);
    return $_response_object;
}

#
# device_backup_data_delete
#
# Delete the user data backup
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_backup_data_delete' } = {
        summary => 'Delete the user data backup',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_backup_data_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/backup/data';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_backup_data_get
#
# Download the user data backup
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_backup_data_get' } = {
        summary => 'Download the user data backup',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub device_backup_data_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/backup/data';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# device_certificate_post
#
# Update the HTTPS certificate. If certificate and key are not provided they will be automatically generated
#
# @param Certificate $certificate  (optional)
{
    my $params = {
    'certificate' => {
        data_type => 'Certificate',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_certificate_post' } = {
        summary => 'Update the HTTPS certificate. If certificate and key are not provided they will be automatically generated',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_certificate_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/certificate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'certificate'}) {
        $_body_data = $args{'certificate'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_clients_get
#
# Get a list of currently connected LAN clients. A '?' hostname value indicates that the client has not shared their hostname with the modem. Perhaps the client connected with a static IP or has not yet refreshed it's DHCP lease since the board's last reboot.
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_clients_get' } = {
        summary => 'Get a list of currently connected LAN clients. A &#39;?&#39; hostname value indicates that the client has not shared their hostname with the modem. Perhaps the client connected with a static IP or has not yet refreshed it&#39;s DHCP lease since the board&#39;s last reboot.',
        params => $params,
        returns => 'ARRAY[Client]',
        };
}
# @return ARRAY[Client]
#
sub device_clients_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/clients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Client]', $response);
    return $_response_object;
}

#
# device_export_users_get
#
# Export the users to a file with the encrypted passwords. This file can be used to import the users to any Quicksilver device
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_export_users_get' } = {
        summary => 'Export the users to a file with the encrypted passwords. This file can be used to import the users to any Quicksilver device',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub device_export_users_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/exportUsers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# device_fw_image_delete
#
# Remove the staged device firmware image
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_fw_image_delete' } = {
        summary => 'Remove the staged device firmware image',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_fw_image_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/fw/image';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_fw_image_get
#
# Get info about the currently staged device firmware image
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_fw_image_get' } = {
        summary => 'Get info about the currently staged device firmware image',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub device_fw_image_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/fw/image';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# device_fw_image_put
#
# Upload an image to be used for updating the device firmware
#
# @param string $content_disposition  (required)
# @param string $body  (required)
{
    my $params = {
    'content_disposition' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'body' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_fw_image_put' } = {
        summary => 'Upload an image to be used for updating the device firmware',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_fw_image_put {
    my ($self, %args) = @_;

    # verify the required parameter 'content_disposition' is set
    unless (exists $args{'content_disposition'}) {
      croak("Missing the required parameter 'content_disposition' when calling device_fw_image_put");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling device_fw_image_put");
    }

    # parse inputs
    my $_resource_path = '/device/fw/image';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/octet-stream');

    # header params
    if ( exists $args{'content_disposition'}) {
        $header_params->{'Content-Disposition'} = $self->{api_client}->to_header_value($args{'content_disposition'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_fw_last_update_result_get
#
# Gets the result of the last product firmware update
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_fw_last_update_result_get' } = {
        summary => 'Gets the result of the last product firmware update',
        params => $params,
        returns => 'DeviceFwLastUpdateResultGet200Response',
        };
}
# @return DeviceFwLastUpdateResultGet200Response
#
sub device_fw_last_update_result_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/fw/lastUpdateResult';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeviceFwLastUpdateResultGet200Response', $response);
    return $_response_object;
}

#
# device_fw_update_post
#
# Update the device firmware using the staged image
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_fw_update_post' } = {
        summary => 'Update the device firmware using the staged image',
        params => $params,
        returns => 'DeviceFwUpdatePost200Response',
        };
}
# @return DeviceFwUpdatePost200Response
#
sub device_fw_update_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/fw/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeviceFwUpdatePost200Response', $response);
    return $_response_object;
}

#
# device_gps_fix_get
#
# Get the last GPS fix
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_gps_fix_get' } = {
        summary => 'Get the last GPS fix',
        params => $params,
        returns => 'GpsFix',
        };
}
# @return GpsFix
#
sub device_gps_fix_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/gps/fix';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GpsFix', $response);
    return $_response_object;
}

#
# device_gps_power_get
#
# Get the GPS power state
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_gps_power_get' } = {
        summary => 'Get the GPS power state',
        params => $params,
        returns => 'boolean',
        };
}
# @return boolean
#
sub device_gps_power_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/gps/power';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('boolean', $response);
    return $_response_object;
}

#
# device_import_users_post
#
# Add and modify users from the import file. Does not remove any users and does not modify the user doing the import. Cannot be used to modify passwords or set a new password
#
# @param string $body  (required)
{
    my $params = {
    'body' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_import_users_post' } = {
        summary => 'Add and modify users from the import file. Does not remove any users and does not modify the user doing the import. Cannot be used to modify passwords or set a new password',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_import_users_post {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling device_import_users_post");
    }

    # parse inputs
    my $_resource_path = '/device/importUsers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_in_safe_mode_get
#
# Get whether the device booted up in safe mode
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_in_safe_mode_get' } = {
        summary => 'Get whether the device booted up in safe mode',
        params => $params,
        returns => 'boolean',
        };
}
# @return boolean
#
sub device_in_safe_mode_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/inSafeMode';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('boolean', $response);
    return $_response_object;
}

#
# device_info_get
#
# Gets information about the device
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_info_get' } = {
        summary => 'Gets information about the device',
        params => $params,
        returns => 'DeviceInfo',
        };
}
# @return DeviceInfo
#
sub device_info_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/info';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeviceInfo', $response);
    return $_response_object;
}

#
# device_ird_api_version_get
#
# Get the active API version for the Iridium modem
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_api_version_get' } = {
        summary => 'Get the active API version for the Iridium modem',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub device_ird_api_version_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/apiVersion';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# device_ird_boot_info_get
#
# Get the boot info for the Iridium modem
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_boot_info_get' } = {
        summary => 'Get the boot info for the Iridium modem',
        params => $params,
        returns => 'IrdBootInfo',
        };
}
# @return IrdBootInfo
#
sub device_ird_boot_info_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/bootInfo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IrdBootInfo', $response);
    return $_response_object;
}

#
# device_ird_constellation_get
#
# Get the Iridium constellation state
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_constellation_get' } = {
        summary => 'Get the Iridium constellation state',
        params => $params,
        returns => 'IrdConstellation',
        };
}
# @return IrdConstellation
#
sub device_ird_constellation_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/constellation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IrdConstellation', $response);
    return $_response_object;
}

#
# device_ird_fw_image_delete
#
# Remove the staged Iridium firmware image
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_fw_image_delete' } = {
        summary => 'Remove the staged Iridium firmware image',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_ird_fw_image_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/fw/image';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_ird_fw_image_get
#
# Get info about the currently staged Iridium firmware image
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_fw_image_get' } = {
        summary => 'Get info about the currently staged Iridium firmware image',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub device_ird_fw_image_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/fw/image';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# device_ird_fw_image_put
#
# Upload an image to be used for updating the Iridium firmware
#
# @param string $content_disposition  (required)
# @param string $body  (required)
{
    my $params = {
    'content_disposition' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'body' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_ird_fw_image_put' } = {
        summary => 'Upload an image to be used for updating the Iridium firmware',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_ird_fw_image_put {
    my ($self, %args) = @_;

    # verify the required parameter 'content_disposition' is set
    unless (exists $args{'content_disposition'}) {
      croak("Missing the required parameter 'content_disposition' when calling device_ird_fw_image_put");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling device_ird_fw_image_put");
    }

    # parse inputs
    my $_resource_path = '/device/ird/fw/image';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/octet-stream');

    # header params
    if ( exists $args{'content_disposition'}) {
        $header_params->{'Content-Disposition'} = $self->{api_client}->to_header_value($args{'content_disposition'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_ird_fw_slot_slot_get
#
# Get information about an Iridium firmware slot
#
# @param string $slot The Iridium firmware slot to retrieve info about (required)
{
    my $params = {
    'slot' => {
        data_type => 'string',
        description => 'The Iridium firmware slot to retrieve info about',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_ird_fw_slot_slot_get' } = {
        summary => 'Get information about an Iridium firmware slot',
        params => $params,
        returns => 'DeviceIrdFwSlotSlotGet200Response',
        };
}
# @return DeviceIrdFwSlotSlotGet200Response
#
sub device_ird_fw_slot_slot_get {
    my ($self, %args) = @_;

    # verify the required parameter 'slot' is set
    unless (exists $args{'slot'}) {
      croak("Missing the required parameter 'slot' when calling device_ird_fw_slot_slot_get");
    }

    # parse inputs
    my $_resource_path = '/device/ird/fw/slot/{slot}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'slot'}) {
        my $_base_variable = "{" . "slot" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'slot'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeviceIrdFwSlotSlotGet200Response', $response);
    return $_response_object;
}

#
# device_ird_fw_update_post
#
# Update the Iridium firmware using the staged image
#
# @param string $body  (required)
{
    my $params = {
    'body' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_ird_fw_update_post' } = {
        summary => 'Update the Iridium firmware using the staged image',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_ird_fw_update_post {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling device_ird_fw_update_post");
    }

    # parse inputs
    my $_resource_path = '/device/ird/fw/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_ird_hw_get
#
# Get the hardware info for the Iridium modem
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_hw_get' } = {
        summary => 'Get the hardware info for the Iridium modem',
        params => $params,
        returns => 'IrdHw',
        };
}
# @return IrdHw
#
sub device_ird_hw_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/hw';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IrdHw', $response);
    return $_response_object;
}

#
# device_ird_reports_hwtest_get
#
# Get HW test report
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_reports_hwtest_get' } = {
        summary => 'Get HW test report',
        params => $params,
        returns => 'IrdHwTestReport',
        };
}
# @return IrdHwTestReport
#
sub device_ird_reports_hwtest_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/reports/hwtest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IrdHwTestReport', $response);
    return $_response_object;
}

#
# device_ird_self_test_post
#
# Run an Iridium self test
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_self_test_post' } = {
        summary => 'Run an Iridium self test',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_ird_self_test_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/selfTest';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_ird_sim_get
#
# Get SIM info
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_sim_get' } = {
        summary => 'Get SIM info',
        params => $params,
        returns => 'IrdSim',
        };
}
# @return IrdSim
#
sub device_ird_sim_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/sim';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IrdSim', $response);
    return $_response_object;
}

#
# device_ird_state_get
#
# Get the state for the Iridium modem
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_ird_state_get' } = {
        summary => 'Get the state for the Iridium modem',
        params => $params,
        returns => 'IrdState',
        };
}
# @return IrdState
#
sub device_ird_state_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/ird/state';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IrdState', $response);
    return $_response_object;
}

#
# device_reboot_post
#
# Reboot the device
#
# @param boolean $recovery Whether to reboot to recovery mode (optional, default to false)
{
    my $params = {
    'recovery' => {
        data_type => 'boolean',
        description => 'Whether to reboot to recovery mode',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_reboot_post' } = {
        summary => 'Reboot the device',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_reboot_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/reboot';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'recovery'}) {
        $query_params->{'recovery'} = $self->{api_client}->to_query_value($args{'recovery'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_reset_startup_config_post
#
# Reset startup configuration to defaults
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_reset_startup_config_post' } = {
        summary => 'Reset startup configuration to defaults',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_reset_startup_config_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/resetStartupConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_save_runtime_config_post
#
# Copy the runtime configuration to the startup configuration
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_save_runtime_config_post' } = {
        summary => 'Copy the runtime configuration to the startup configuration',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_save_runtime_config_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/saveRuntimeConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_time_get
#
# Get time info
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_time_get' } = {
        summary => 'Get time info',
        params => $params,
        returns => 'TimeInfo',
        };
}
# @return TimeInfo
#
sub device_time_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/time';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TimeInfo', $response);
    return $_response_object;
}

#
# device_usage_day_get
#
# Get a daily summary of data usage. Time frame can be specified by the user, please note we can currently only display this information for 95 days in the past. Always in UTC
#
# @param string $start  (optional)
# @param string $end  (optional)
{
    my $params = {
    'start' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_usage_day_get' } = {
        summary => 'Get a daily summary of data usage. Time frame can be specified by the user, please note we can currently only display this information for 95 days in the past. Always in UTC',
        params => $params,
        returns => 'ARRAY[DataUsageEntry]',
        };
}
# @return ARRAY[DataUsageEntry]
#
sub device_usage_day_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/usage/day';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DataUsageEntry]', $response);
    return $_response_object;
}

#
# device_usage_delete
#
# Clear all data usage records. Please expect some unrecorded if this command is run during an active data session. It will take at least 5 minutes for new records to appear
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_usage_delete' } = {
        summary => 'Clear all data usage records. Please expect some unrecorded if this command is run during an active data session. It will take at least 5 minutes for new records to appear',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub device_usage_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/usage';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# device_usage_five_get
#
# Get a summary of data usage recorded in five minute increments. Time frame can be specified by the user, please note we can currently only display this information for 48 hours in the past. Always in UTC
#
# @param string $start  (optional)
# @param string $end  (optional)
{
    my $params = {
    'start' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_usage_five_get' } = {
        summary => 'Get a summary of data usage recorded in five minute increments. Time frame can be specified by the user, please note we can currently only display this information for 48 hours in the past. Always in UTC',
        params => $params,
        returns => 'ARRAY[DataUsageEntry]',
        };
}
# @return ARRAY[DataUsageEntry]
#
sub device_usage_five_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/usage/five';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DataUsageEntry]', $response);
    return $_response_object;
}

#
# device_usage_hour_get
#
# Get an hourly summary of data usage. Time frame can be specified by the user, please note we can currently only display this information for 64 days in the past. Always in UTC
#
# @param string $start  (optional)
# @param string $end  (optional)
{
    my $params = {
    'start' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_usage_hour_get' } = {
        summary => 'Get an hourly summary of data usage. Time frame can be specified by the user, please note we can currently only display this information for 64 days in the past. Always in UTC',
        params => $params,
        returns => 'ARRAY[DataUsageEntry]',
        };
}
# @return ARRAY[DataUsageEntry]
#
sub device_usage_hour_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/usage/hour';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DataUsageEntry]', $response);
    return $_response_object;
}

#
# device_usage_month_get
#
# Get a monthly summary of data usage. Time frame can be specified by the user. Always in UTC
#
# @param string $start  (optional)
# @param string $end  (optional)
{
    my $params = {
    'start' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_usage_month_get' } = {
        summary => 'Get a monthly summary of data usage. Time frame can be specified by the user. Always in UTC',
        params => $params,
        returns => 'ARRAY[DataUsageEntry]',
        };
}
# @return ARRAY[DataUsageEntry]
#
sub device_usage_month_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/usage/month';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DataUsageEntry]', $response);
    return $_response_object;
}

#
# device_usage_year_get
#
# Get a yearly summary of data usage. Time frame can be specified by the user. Always in UTC
#
# @param string $start  (optional)
# @param string $end  (optional)
{
    my $params = {
    'start' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_usage_year_get' } = {
        summary => 'Get a yearly summary of data usage. Time frame can be specified by the user. Always in UTC',
        params => $params,
        returns => 'ARRAY[DataUsageEntry]',
        };
}
# @return ARRAY[DataUsageEntry]
#
sub device_usage_year_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/usage/year';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DataUsageEntry]', $response);
    return $_response_object;
}

#
# device_wifi_available_get
#
# Get the Wi-Fi available status
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'device_wifi_available_get' } = {
        summary => 'Get the Wi-Fi available status',
        params => $params,
        returns => 'boolean',
        };
}
# @return boolean
#
sub device_wifi_available_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/wifi/available';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('boolean', $response);
    return $_response_object;
}

1;
