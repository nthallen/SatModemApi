=begin comment

Quicksilver Web API

Further detail about the available features and configuration options can be found in the User Guide.    # Authorization All API calls use bearer authorization except for the following. - POST /api/user/sessions - Uses basic authorization - GET /api/events - Uses query string authorization  # Errors Since the following errors can happen with any API call or with a broad group of API calls, they are documented here rather than for each API call. - 400 (Bad Request). This may occur for any API call, due to the authorization header being malformed. It may also occur due to malformed or incorrect JSON structure of the request body. Other more specific reasons are documented on a per API basis below. - 401 (Unauthenticated) - 403 (Unauthorized). If the user is authenticated as a user with the Standard role, but the API call requires the Admin role. - 500 (Internal Server Error) 

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::EventsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# events_id_subscriptions_get
#
# Get the list of events that an event connection is subscribed to
#
# @param string $id Id of event connection (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Id of event connection',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_id_subscriptions_get' } = {
        summary => 'Get the list of events that an event connection is subscribed to',
        params => $params,
        returns => 'ARRAY[EventName]',
        };
}
# @return ARRAY[EventName]
#
sub events_id_subscriptions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling events_id_subscriptions_get");
    }

    # parse inputs
    my $_resource_path = '/events/{id}/subscriptions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[EventName]', $response);
    return $_response_object;
}

#
# events_id_subscriptions_name_get
#
# Get whether an event connection is subscribed to a specific event
#
# @param string $id Id of event connection (required)
# @param EventName $name The name of the event (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Id of event connection',
        required => '1',
    },
    'name' => {
        data_type => 'EventName',
        description => 'The name of the event',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_id_subscriptions_name_get' } = {
        summary => 'Get whether an event connection is subscribed to a specific event',
        params => $params,
        returns => 'boolean',
        };
}
# @return boolean
#
sub events_id_subscriptions_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling events_id_subscriptions_name_get");
    }

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling events_id_subscriptions_name_get");
    }

    # parse inputs
    my $_resource_path = '/events/{id}/subscriptions/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('boolean', $response);
    return $_response_object;
}

#
# events_id_subscriptions_name_put
#
# Set whether an event connection is subscribed to a specific event
#
# @param string $id Id of event connection (required)
# @param EventName $name The name of the event (required)
# @param boolean $body  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Id of event connection',
        required => '1',
    },
    'name' => {
        data_type => 'EventName',
        description => 'The name of the event',
        required => '1',
    },
    'body' => {
        data_type => 'boolean',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_id_subscriptions_name_put' } = {
        summary => 'Set whether an event connection is subscribed to a specific event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub events_id_subscriptions_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling events_id_subscriptions_name_put");
    }

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling events_id_subscriptions_name_put");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling events_id_subscriptions_name_put");
    }

    # parse inputs
    my $_resource_path = '/events/{id}/subscriptions/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# events_id_subscriptions_put
#
# Set the list of events that an event connection is subscribed to
#
# @param string $id Id of event connection (required)
# @param ARRAY[EventName] $event_name  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Id of event connection',
        required => '1',
    },
    'event_name' => {
        data_type => 'ARRAY[EventName]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_id_subscriptions_put' } = {
        summary => 'Set the list of events that an event connection is subscribed to',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub events_id_subscriptions_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling events_id_subscriptions_put");
    }

    # verify the required parameter 'event_name' is set
    unless (exists $args{'event_name'}) {
      croak("Missing the required parameter 'event_name' when calling events_id_subscriptions_put");
    }

    # parse inputs
    my $_resource_path = '/events/{id}/subscriptions';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'event_name'}) {
        $_body_data = $args{'event_name'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# socket_get
#
# Start a WebSocket connection
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'socket_get' } = {
        summary => 'Start a WebSocket connection',
        params => $params,
        returns => 'SocketGet200Response',
        };
}
# @return SocketGet200Response
#
sub socket_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/socket';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(QueryAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SocketGet200Response', $response);
    return $_response_object;
}

1;
