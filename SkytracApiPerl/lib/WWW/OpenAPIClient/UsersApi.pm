=begin comment

Quicksilver Web API

Further detail about the available features and configuration options can be found in the User Guide.    # Authorization All API calls use bearer authorization except for the following. - POST /api/user/sessions - Uses basic authorization - GET /api/events - Uses query string authorization  # Errors Since the following errors can happen with any API call or with a broad group of API calls, they are documented here rather than for each API call. - 400 (Bad Request). This may occur for any API call, due to the authorization header being malformed. It may also occur due to malformed or incorrect JSON structure of the request body. Other more specific reasons are documented on a per API basis below. - 401 (Unauthenticated) - 403 (Unauthorized). If the user is authenticated as a user with the Standard role, but the API call requires the Admin role. - 500 (Internal Server Error) 

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UsersApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# users_get
#
# Get all users
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'users_get' } = {
        summary => 'Get all users',
        params => $params,
        returns => 'ARRAY[GetUser]',
        };
}
# @return ARRAY[GetUser]
#
sub users_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetUser]', $response);
    return $_response_object;
}

#
# users_name_delete
#
# Delete a user
#
# @param string $name Name of user (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of user',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'users_name_delete' } = {
        summary => 'Delete a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub users_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling users_name_delete");
    }

    # parse inputs
    my $_resource_path = '/users/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# users_name_patch
#
# Modify a user
#
# @param string $name Name of user (required)
# @param PatchUser $patch_user  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of user',
        required => '1',
    },
    'patch_user' => {
        data_type => 'PatchUser',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'users_name_patch' } = {
        summary => 'Modify a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub users_name_patch {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling users_name_patch");
    }

    # verify the required parameter 'patch_user' is set
    unless (exists $args{'patch_user'}) {
      croak("Missing the required parameter 'patch_user' when calling users_name_patch");
    }

    # parse inputs
    my $_resource_path = '/users/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'patch_user'}) {
        $_body_data = $args{'patch_user'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# users_name_sessions_delete
#
# Remove all of a user's sessions
#
# @param string $name Name of user (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of user',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'users_name_sessions_delete' } = {
        summary => 'Remove all of a user&#39;s sessions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub users_name_sessions_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling users_name_sessions_delete");
    }

    # parse inputs
    my $_resource_path = '/users/{name}/sessions';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# users_post
#
# Add a user
#
# @param PostUser $post_user  (required)
{
    my $params = {
    'post_user' => {
        data_type => 'PostUser',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'users_post' } = {
        summary => 'Add a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub users_post {
    my ($self, %args) = @_;

    # verify the required parameter 'post_user' is set
    unless (exists $args{'post_user'}) {
      croak("Missing the required parameter 'post_user' when calling users_post");
    }

    # parse inputs
    my $_resource_path = '/users';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'post_user'}) {
        $_body_data = $args{'post_user'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAdminOnly )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
