=begin comment

Quicksilver Web API

Further detail about the available features and configuration options can be found in the User Guide.    # Authorization All API calls use bearer authorization except for the following. - POST /api/user/sessions - Uses basic authorization - GET /api/events - Uses query string authorization  # Errors Since the following errors can happen with any API call or with a broad group of API calls, they are documented here rather than for each API call. - 400 (Bad Request). This may occur for any API call, due to the authorization header being malformed. It may also occur due to malformed or incorrect JSON structure of the request body. Other more specific reasons are documented on a per API basis below. - 401 (Unauthenticated) - 403 (Unauthorized). If the user is authenticated as a user with the Standard role, but the API call requires the Admin role. - 500 (Internal Server Error) 

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UserApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# user_change_password_post
#
# Change the session owner's password
#
# @param UserChangePasswordPostRequest $user_change_password_post_request  (required)
{
    my $params = {
    'user_change_password_post_request' => {
        data_type => 'UserChangePasswordPostRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'user_change_password_post' } = {
        summary => 'Change the session owner&#39;s password',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_change_password_post {
    my ($self, %args) = @_;

    # verify the required parameter 'user_change_password_post_request' is set
    unless (exists $args{'user_change_password_post_request'}) {
      croak("Missing the required parameter 'user_change_password_post_request' when calling user_change_password_post");
    }

    # parse inputs
    my $_resource_path = '/user/changePassword';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'user_change_password_post_request'}) {
        $_body_data = $args{'user_change_password_post_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# user_get
#
# Get the session owner
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'user_get' } = {
        summary => 'Get the session owner',
        params => $params,
        returns => 'GetUser',
        };
}
# @return GetUser
#
sub user_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/user';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUser', $response);
    return $_response_object;
}

#
# user_sessions_delete
#
# Delete all of the sessions for the session owner. Not just this session.
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'user_sessions_delete' } = {
        summary => 'Delete all of the sessions for the session owner. Not just this session.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub user_sessions_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/user/sessions';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerAuthAllRoles )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
